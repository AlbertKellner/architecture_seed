// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(OnCareContext))]
    [Migration("20180625202432_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataEntity.Model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataEntity.Model.FarmaciaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEntityId");

                    b.ToTable("Farmacias");
                });

            modelBuilder.Entity("DataEntity.Model.LaboratorioEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEntityId");

                    b.ToTable("Laboratorios");
                });

            modelBuilder.Entity("DataEntity.Model.MedicoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEntityId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("DataEntity.Model.PacienteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEntityId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationFarmaciaMedico", b =>
                {
                    b.Property<int>("FarmaciaId");

                    b.Property<int>("MedicoId");

                    b.HasKey("FarmaciaId", "MedicoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("RelationFarmaciaMedico");
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationFarmaciaPaciente", b =>
                {
                    b.Property<int>("FarmaciaId");

                    b.Property<int>("PacienteId");

                    b.HasKey("FarmaciaId", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("RelationFarmaciaPaciente");
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationLaboratorioFarmacia", b =>
                {
                    b.Property<int>("LaboratorioId");

                    b.Property<int>("FarmaciaId");

                    b.HasKey("LaboratorioId", "FarmaciaId");

                    b.HasIndex("FarmaciaId");

                    b.ToTable("RelationLaboratorioFarmacia");
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationLaboratorioMedico", b =>
                {
                    b.Property<int>("LaboratorioId");

                    b.Property<int>("MedicoId");

                    b.HasKey("LaboratorioId", "MedicoId");

                    b.HasIndex("MedicoId");

                    b.ToTable("RelationLaboratorioMedico");
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationMedicoPaciente", b =>
                {
                    b.Property<int>("MedicoId");

                    b.Property<int>("PacienteId");

                    b.HasKey("MedicoId", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("RelationMedicoPaciente");
                });

            modelBuilder.Entity("DataEntity.Model.UsuarioEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("IdentityId")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataEntity.Model.FarmaciaEntity", b =>
                {
                    b.HasOne("DataEntity.Model.UsuarioEntity")
                        .WithMany("Farmacias")
                        .HasForeignKey("UsuarioEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataEntity.Model.LaboratorioEntity", b =>
                {
                    b.HasOne("DataEntity.Model.UsuarioEntity")
                        .WithMany("Laboratorios")
                        .HasForeignKey("UsuarioEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataEntity.Model.MedicoEntity", b =>
                {
                    b.HasOne("DataEntity.Model.UsuarioEntity")
                        .WithMany("Medicos")
                        .HasForeignKey("UsuarioEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataEntity.Model.PacienteEntity", b =>
                {
                    b.HasOne("DataEntity.Model.UsuarioEntity")
                        .WithMany("Pacientes")
                        .HasForeignKey("UsuarioEntityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationFarmaciaMedico", b =>
                {
                    b.HasOne("DataEntity.Model.FarmaciaEntity", "Farmacia")
                        .WithMany("Medicos")
                        .HasForeignKey("FarmaciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataEntity.Model.MedicoEntity", "Medico")
                        .WithMany("Farmacias")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationFarmaciaPaciente", b =>
                {
                    b.HasOne("DataEntity.Model.FarmaciaEntity", "Farmacia")
                        .WithMany("Pacientes")
                        .HasForeignKey("FarmaciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataEntity.Model.PacienteEntity", "Paciente")
                        .WithMany("Farmacias")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationLaboratorioFarmacia", b =>
                {
                    b.HasOne("DataEntity.Model.FarmaciaEntity", "Farmacia")
                        .WithMany("Laboratorios")
                        .HasForeignKey("FarmaciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataEntity.Model.LaboratorioEntity", "Laboratorio")
                        .WithMany("Farmacias")
                        .HasForeignKey("LaboratorioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationLaboratorioMedico", b =>
                {
                    b.HasOne("DataEntity.Model.LaboratorioEntity", "Laboratorio")
                        .WithMany("Medicos")
                        .HasForeignKey("LaboratorioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataEntity.Model.MedicoEntity", "Medico")
                        .WithMany("Laboratorios")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataEntity.Model.Relations.RelationMedicoPaciente", b =>
                {
                    b.HasOne("DataEntity.Model.MedicoEntity", "Medico")
                        .WithMany("Pacientes")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataEntity.Model.PacienteEntity", "Paciente")
                        .WithMany("Medicos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataEntity.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataEntity.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataEntity.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataEntity.Model.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
